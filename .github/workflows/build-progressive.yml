name: Progressive Build PS Vita EPUB Reader

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-simple:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup VitaSDK environment
      run: |
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git wget tar python3 python3-pip
        
        # Install VitaSDK (fetch latest release dynamically)
        cd /tmp
        VITASDK_URL=$(curl -s https://api.github.com/repos/vitasdk/autobuilds/releases/latest | grep "browser_download_url.*vitasdk-x86_64-linux-gnu" | cut -d '"' -f 4)
        wget "$VITASDK_URL" -O vitasdk.tar.bz2
        sudo tar -xjf vitasdk.tar.bz2 -C /usr/local/
        
        # Set up environment
        echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
        echo "/usr/local/vitasdk/bin" >> $GITHUB_PATH
        
    - name: Verify VitaSDK installation
      run: |
        export VITASDK=/usr/local/vitasdk
        export PATH=$VITASDK/bin:$PATH
        arm-vita-eabi-gcc --version
        
    - name: Create placeholder assets
      run: |
        # Create minimal placeholder assets
        mkdir -p assets/fonts
        mkdir -p assets/sample_books
        mkdir -p sce_sys/livearea/contents
        
        # Create a simple 1x1 pixel PNG for placeholders
        echo -e '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\x0cIDATx\xdac\xf8\x0f\x00\x00\x01\x00\x01\x00\x18\xdd\x8d\xb4\x00\x00\x00\x00IEND\xaeB`\x82' > sce_sys/icon0.png
        cp sce_sys/icon0.png sce_sys/livearea/contents/bg.png
        cp sce_sys/icon0.png sce_sys/livearea/contents/startup.png
        
    - name: Build simple version first
      run: |
        export VITASDK=/usr/local/vitasdk
        export PATH=$VITASDK/bin:$PATH
        
        # Test with simple CMakeLists
        mkdir -p build_simple
        cd build_simple
        
        # Copy simple CMakeLists
        cp ../CMakeLists_simple_build.txt ./CMakeLists.txt
        
        # Configure and build
        cmake .. -DCMAKE_TOOLCHAIN_FILE=$VITASDK/share/vita.toolchain.cmake -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
        
        # Check results
        echo "Simple build results:"
        ls -la *.vpk *.self || echo "No files found"
        
    - name: Upload simple build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: epub-reader-simple-vpk
        path: |
          build_simple/*.vpk
          build_simple/*.self
        retention-days: 30

  build-full:
    runs-on: ubuntu-latest
    needs: build-simple
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup VitaSDK environment
      run: |
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git wget tar python3 python3-pip
        
        # Install VitaSDK
        cd /tmp
        wget https://github.com/vitasdk/autobuilds/releases/download/master-linux-v1460/vitasdk-x86_64-linux-gnu-2024-08-07_20-24-40.tar.bz2
        sudo tar -xjf vitasdk-x86_64-linux-gnu-2024-08-07_20-24-40.tar.bz2 -C /usr/local/
        
        # Set up environment
        echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
        echo "/usr/local/vitasdk/bin" >> $GITHUB_PATH
        
    - name: Install additional dependencies
      run: |
        export VITASDK=/usr/local/vitasdk
        export PATH=$VITASDK/bin:$PATH
        
        # Install additional libraries that might be needed
        sudo apt-get install -y libcurl4-openssl-dev zlib1g-dev
        
        # Check what's available in VitaSDK
        ls -la $VITASDK/arm-vita-eabi/lib/ | head -20
        
    - name: Create placeholder assets
      run: |
        # Create minimal placeholder assets
        mkdir -p assets/fonts
        mkdir -p assets/sample_books
        mkdir -p sce_sys/livearea/contents
        
        # Create placeholder font
        echo "placeholder font" > assets/fonts/default.ttf
        
        # Create simple images
        echo -e '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\x0cIDATx\xdac\xf8\x0f\x00\x00\x01\x00\x01\x00\x18\xdd\x8d\xb4\x00\x00\x00\x00IEND\xaeB`\x82' > sce_sys/icon0.png
        cp sce_sys/icon0.png sce_sys/livearea/contents/bg.png
        cp sce_sys/icon0.png sce_sys/livearea/contents/startup.png
        
    - name: Modify CMakeLists for compatibility
      run: |
        # Create a version that only includes available libraries
        cp CMakeLists.txt CMakeLists_original.txt
        
        # Update to use only available libraries
        sed -i 's/freetype/#freetype/g' CMakeLists.txt
        sed -i 's/png/#png/g' CMakeLists.txt
        sed -i 's/jpeg/#jpeg/g' CMakeLists.txt
        sed -i 's/zip/#zip/g' CMakeLists.txt
        sed -i 's/curl/#curl/g' CMakeLists.txt
        sed -i 's/ssl/#ssl/g' CMakeLists.txt
        sed -i 's/crypto/#crypto/g' CMakeLists.txt
        
    - name: Build full version
      run: |
        export VITASDK=/usr/local/vitasdk
        export PATH=$VITASDK/bin:$PATH
        
        mkdir -p build
        cd build
        
        # Try to build with reduced dependencies
        cmake .. -DCMAKE_TOOLCHAIN_FILE=$VITASDK/share/vita.toolchain.cmake -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc) || echo "Build failed, checking what's available"
        
        # Check what files were created
        echo "Full build results:"
        ls -la *.vpk *.self || echo "No files found"
        
    - name: Upload full build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: epub-reader-full-build
        path: |
          build/*.vpk
          build/*.self
          build/CMakeCache.txt
          build/CMakeFiles/CMakeError.log
          build/CMakeFiles/CMakeOutput.log
        retention-days: 30
        
    - name: Create deployment package
      if: success()
      run: |
        cd build
        if [ -f "epub_reader.vpk" ]; then
          mkdir -p deploy
          cp epub_reader.vpk deploy/
          
          # Create deployment instructions
          cat > deploy/DEPLOYMENT.md << 'EOF'
          # PS Vita EPUB Reader Deployment
          
          ## Automatic Deployment
          If you have your Vita's IP address, you can deploy automatically:
          
          ```bash
          # Start FTP server on Vita (VitaShell > SELECT)
          curl -T epub_reader.vpk "ftp://YOUR_VITA_IP:1337/ux0:/vpk/"
          ```
          
          ## Manual Installation
          1. Copy `epub_reader.vpk` to `ux0:/vpk/` on your Vita
          2. Install using VitaShell
          3. Launch from LiveArea
          
          ## Your Vita IP
          Replace `<YOUR_VITA_IP>` with your PS Vita's IP address.
          
          ## Deploy Command
          ```bash
          curl -T epub_reader.vpk "ftp://$VITA_IP:1337/ux0:/vpk/"
          ```
          ```
          EOF
          
          echo "Deployment package created"
        fi
        
    - name: Create filesystem deployment package
      if: success() && github.event_name == 'push'
      run: |
        cd build
        if [ -f "epub_reader.vpk" ]; then
          mkdir -p vita_deploy
          cp epub_reader.vpk vita_deploy/
          
          # Create filesystem deployment script for Linux/macOS
          cat > vita_deploy/deploy_filesystem.sh << 'EOF'
#!/bin/bash
# Filesystem deployment script for PS Vita EPUB Reader

VITA_MOUNT_POINT="/mnt/vita"  # Adjust this path as needed
VPK_FILE="epub_reader.vpk"

echo "=== PS Vita EPUB Reader Filesystem Deployment ==="

if [ ! -f "$VPK_FILE" ]; then
    echo "ERROR: $VPK_FILE not found in current directory"
    exit 1
fi

if [ ! -d "$VITA_MOUNT_POINT" ]; then
    echo "ERROR: Vita mount point $VITA_MOUNT_POINT not found"
    echo "Please mount your Vita's filesystem first:"
    echo "  1. Connect Vita to PC via USB"
    echo "  2. Enable USB mode in VitaShell (START + SELECT)"
    echo "  3. Mount the filesystem to $VITA_MOUNT_POINT"
    exit 1
fi

VPK_DIR="$VITA_MOUNT_POINT/vpk"
if [ ! -d "$VPK_DIR" ]; then
    echo "Creating VPK directory: $VPK_DIR"
    mkdir -p "$VPK_DIR"
fi

echo "Copying $VPK_FILE to Vita..."
cp "$VPK_FILE" "$VPK_DIR/"

if [ $? -eq 0 ]; then
    echo "SUCCESS: VPK copied to $VPK_DIR/$VPK_FILE"
    echo "Next steps:"
    echo "  1. Safely eject the Vita"
    echo "  2. Disable USB mode in VitaShell"
    echo "  3. Navigate to ux0:/vpk/ in VitaShell"
    echo "  4. Press X on epub_reader.vpk to install"
else
    echo "ERROR: Failed to copy VPK file"
    exit 1
fi
EOF

          chmod +x vita_deploy/deploy_filesystem.sh
          
          # Create Windows batch script
          cat > vita_deploy/deploy_filesystem.bat << 'EOF'
@echo off
set VITA_DRIVE=E:
set VPK_FILE=epub_reader.vpk

echo === PS Vita EPUB Reader Filesystem Deployment ===

if not exist "%VPK_FILE%" (
    echo ERROR: %VPK_FILE% not found in current directory
    pause
    exit /b 1
)

if not exist "%VITA_DRIVE%\" (
    echo ERROR: Vita drive %VITA_DRIVE% not found
    echo Please connect your Vita and enable USB mode
    pause
    exit /b 1
)

if not exist "%VITA_DRIVE%\vpk\" (
    mkdir "%VITA_DRIVE%\vpk"
)

echo Copying %VPK_FILE% to Vita...
copy "%VPK_FILE%" "%VITA_DRIVE%\vpk\"

if %errorlevel% equ 0 (
    echo SUCCESS: VPK copied to %VITA_DRIVE%\vpk\%VPK_FILE%
    echo Next steps:
    echo   1. Safely eject the Vita
    echo   2. Disable USB mode in VitaShell
    echo   3. Navigate to ux0:/vpk/ in VitaShell
    echo   4. Press X on epub_reader.vpk to install
) else (
    echo ERROR: Failed to copy VPK file
)

pause
EOF

          echo "Filesystem deployment package created"
        fi